version: 2.1

experimental:
  notify:
    branches:
      only:
        - master

# Define shareable packages of configuration
# elements used into the worflow (= Orbs)
orbs:
  operator:
    # Parameters anchor
    .params_operator: &params_operator
      parameters:
        operatorDir:
          type: string
          description: relative path where the build must be run
          default: nifikop
        operatorName:
          type: string
          description: operator's name
          default: nifikop
      working_directory: /home/circleci/<< parameters.operatorDir >>
      executor: operator-build
    # Job anchor
    .job_operator: &job_operator
      working_directory: /home/circleci/<< parameters.operatorDir >>
      executor: operator-build
    # Setting up docker executor using nifikop-build image.
    executors:
      operator-build:
        docker:
          - image: ghcr.io/konpyutaika/docker-images/nifikop-build:1.24.3
    # Define jobs list
    jobs:
      # Build job, which build operator docker image (with operator-sdk build)
      generate:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/nifikop
          - setup_remote_docker # Creates a separate environment for each build for security.
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              keys: # Use checksum of go.sum to version cache.
                - << parameters.operatorName >>-generate-1-{{ .Branch }}-{{ checksum "go.sum" }}-{{}}
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          # Build steps
          - run:
              name: Download dependencies
              command: if [ ! -d vendor ]; then go mod download; fi
          - run:
              name: Vendor dependencies
              command: if [ ! -d vendor ]; then go mod vendor; fi
          - run:
              name: Generate
              command: |
                make generate
                [ "$(git ls-files -m | grep -c zz_generated)" -eq 0 ]
          - run:
              name: List
              command: |
                ls -la /home/circleci/<< parameters.operatorDir >>
          - persist_to_workspace: # Create artifacts
              root: /home/circleci
              paths:
                - << parameters.operatorDir >>/build/_output
                - << parameters.operatorDir >>/vendor
          - save_cache:
              name: Save build artifacts in cache
              key: << parameters.operatorName >>-generate-1-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CACHE_VERSION }}
              paths:
                - build/_output
                - vendor
      lint:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/nifikop
          - setup_remote_docker # Creates a separate environment for each build for security.
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              keys: # Use checksum of go.sum to version cache.
                - << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CACHE_VERSION }}
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          - run:
              name: Lint Code
              command: make lint
      # Build job, which builds the cross-platform operator docker image (with operator-sdk build)
      build-operator:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/nifikop
          - setup_remote_docker # Creates a separate environment for each build for security.
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              keys: # Use checksum of go.sum to version cache.
                - << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CACHE_VERSION }}
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          - run:
              name: Build Operator
              command: make build
          - persist_to_workspace: # Create artifacts
              root: /home/circleci
              paths:
                - << parameters.operatorDir >>/build/_output
                - << parameters.operatorDir >>/vendor
          - deploy:
              name: Build & Push Operator Image to Github Container Registry
              command: |
                if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -gt 0 ]]; then
                  echo "This is a PR, we don't push to GitHub."
                else
                  docker login ghcr.io -u $GH_NAME --password $GH_TOKEN
                  make docker-buildx
                fi
          - save_cache:
              name: Save build artifacts in cache
              key: << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CACHE_VERSION }}
              paths:
                - build/_output
                - vendor

      # Unit test job, will execute makefile 'unit-test-with-vendor' step
      test-unit:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/nifikop
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          # Unit tests steps
          - run:
              name: Unit Tests
              command: make test-with-vendor
          # Artifacts definitions
          - store_artifacts: # Store unit test coverage reports
              path: coverage.html
          - persist_to_workspace:
              root: /home/circleci
              paths:
                - << parameters.operatorDir >>/cover.out
      #      report-sonar:
      #        description: Detect bugs and vulnerabilities
      #        parameters:
      #          sonar_token_variable_name:
      #            description: the name of the environment variable where the SonarCloud API token is stored
      #            default: SONAR_TOKEN
      #            type: env_var_name
      #          cache_version:
      #            description: increment this value if the cache is corrupted and you want to start with a clean cache
      #            default: 1
      #            type: integer
      #        docker:
      #          - image: 'node:latest'
      #        steps:
      #          - checkout
      #          - run:
      #              name: Create cache directory if it doesn't exist
      #              command: mkdir -p /tmp/cache/scanner
      #          - restore_cache:
      #              keys:
      #                - v<<parameters.cache_version>>-sonarcloud-scanner-4.1.0.1829
      #          - run:
      #              name: SonarCloud
      #              command: |
      #                set -e
      #                VERSION=4.1.0.1829
      #                SONAR_TOKEN=$<<parameters.sonar_token_variable_name>>
      #                SCANNER_DIRECTORY=/tmp/cache/scanner
      #                export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
      #                OS="linux"
      #                echo $SONAR_USER_HOME
      #
      #                if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
      #                  curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
      #                  unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
      #                fi
      #
      #                chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
      #                chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java
      #
      #                $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner -X \
      #                -Dsonar.projectName=nifikop \
      #                -Dsonar.projectKey=${SONAR_PROJECT} \
      #                -Dsonar.login=${SONAR_TOKEN} \
      #                -Dsonar.branch.name=${CIRCLE_BRANCH} \
      #                -Dsonar.organization=${SONAR_ORGANISATION} \
      #                -Dsonar.host.url=https://sonarcloud.io \
      #                -Dsonar.sources=. \
      #                -Dsonar.sources.inclusions="**/**.go" \
      #                -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/sonar-scanner-3.3.0.1492-linux/**,**docs/**" \
      #                -Dsonar.coverage.exclusions="**/vendor/**,**/test/**,**docs/**" \
      #                -Dsonar.tests=. \
      #                -Dsonar.language=go \
      #                -Dsonar.sourceEncoding=UTF-8 \
      #                -Dsonar.test.inclusions="**/**_test.go" \
      #                -Dsonar.test.exclusions="**/vendor/**" \
      #                -Dsonar.go.coverage.reportPaths=coverage.out \
      #                -Dsonar.go.tests.reportPaths=test-report.out \
      #                -Dsonar.coverage.dtdVerification=false \
      #                -Dsonar.log.level=INFO
      #
      #                cat -n .scannerwork/report-task.txt
      #              environment:
      #                SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      #          - save_cache:
      #              key: v<<parameters.cache_version>>-sonarcloud-scanner-4.1.0.1829
      #              paths: /tmp/cache/scanner

      release-helm:
        <<: *params_operator
        working_directory: /home/circleci/<< parameters.operatorDir >>
        docker:
          - image: google/cloud-sdk
        steps:
          - checkout:
              path: /home/circleci/nifikop
          - run:
              name: publish-helm
              command: |
                if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -gt 0 ]]; then
                  echo "This is a PR, we don't publish to helm repo."
                else
                  CHART_VERSION=$(cat helm/nifikop/Chart.yaml| grep version | awk -F"version: " '{print $2}') /home/circleci/nifikop/tools/publish_helm_github_packages.sh
                fi
jobs:
  deploy-website:
    working_directory: /home/circleci/nifikop/site
    docker: # run the steps with Docker
      - image: node:23.10.0
    steps:
      - checkout:
          path: /home/circleci/nifikop
      - run:
          name: deploy
          command: |
            echo $(pwd)
            ls -la
            git config --global user.name "${GH_NAME}"
            git config --global user.email "${GH_EMAIL}"
            echo "machine github.com login ${GH_NAME} password ${GH_TOKEN}" > ~/.netrc
            yarn install
            cd website
            yarn build
            CUSTOM_COMMIT_MESSAGE="[skip ci]" GIT_USER="${GH_NAME}" yarn deploy

# Anchors
## Filters anchors
.everytime_filter: &everytime_filter
  filters:
    tags:
      only: /.*/

.canonical_repo_filter: &canonical_repo_filter
  filters:
    tags:
      only: /.*/
    branches:
      # report sonar only from canonical repository
      only: /^(?!pull\/).*$/ # https://stackoverflow.com/a/5334825/358804

.only_on_release_tag: &only_on_release_tag
  filters:
    # ignore any commit on any branch by default
    branches:
      ignore: /.*/
    # only act on version tags
    tags:
      only: /v[0-9]+(\.[0-9]+)*(-alpha)?-release/

.website_publish: &website_publish
  filters:
    # ignore any commit on any branch by default
    branches:
      only: master

# Workflow definition
workflows:
  version: 2
  ## NiFiKop operator workflow.
  ci-nifikop-operator:
    jobs:
      - operator/generate:
          name: generate-nifikop
          <<: *everytime_filter

      - operator/lint:
          name: lint-nifikop
          requires:
            - generate-nifikop
          <<: *everytime_filter

      - operator/test-unit:
          name: unit-test-nifikop
          requires:
            - lint-nifikop
          <<: *everytime_filter

      - operator/build-operator:
          name: build-nifikop
          requires:
            - unit-test-nifikop
          <<: *everytime_filter

      #      - operator/report-sonar:
      #          name: report-nifikop
      #          requires:
      #            - unit-test-nifikop
      #          <<: *canonical_repo_filter

      - operator/release-helm:
          name: release-helm-incubator-nifikop
          requires:
            - build-nifikop
          <<: *only_on_release_tag

      - deploy-website:
          name: deploy-website
          requires:
            - build-nifikop
          <<: *website_publish
